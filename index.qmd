---
title: "Proposta para os gráficos de Restos a Pagar"
editor: visual
format:
  html:
    # code-fold: true
    # code-summary: "mostrar o código"
    code-overflow: wrap
---

# Objetivo

O meu objetivo foi o de criar gráficos amigáveis sobre restos a pagar a pagar:

1.  identificando o saldo por ano da emissão da nota de empenho (NE CCOR ano de emissão)

2.  apresentando a série histórica suavizada (média dos últimos doze meses) do saldo de restos a pagar a pagar em valores correntes e em valores deflacionados pelo IPCA.

3.  apresentando uma comparação histórica entre o saldo de restos a pagar a paga e a dotação atualizada de despesas discricionárias (Indicador de EOF 2, 6, 7, 8 e 9).

# Passo-a-passo

## Opções dos blocos e bibliotecas

Defini algumas opções para todo o documento, por exemplo, a seleção do idioma e carreguei as bibliotecas necessárias.

```{r chunk_options}
# https://kbroman.org/knitr_knutshell/pages/Rmarkdown.html
knitr::opts_chunk$set( echo=TRUE, warning=FALSE, message=FALSE, tidy = "styler")
options(encoding = "latin1")
```

```{r libraries}
library(tidyverse)
library(readxl)
library(DT)
library(plotly)
library(lubridate)
library(forcats)
library(janitor)
library(stringr)
library(purrr)
```

## Importar dados do Tesouro Gerencial

Utilizei o Tesouro Gerencial para obter os dados utilizados neste projeto. ([link para as planilhas](https://github.com/andreferraribr/book/tree/main/relatorios_fiscais/rreo))

Vamos importar os dados e renomear algumas colunas.

```{r importar_dados}
rp_ano <- read_excel("relatorios_fiscais/rreo/rp_pdg_estoque.xlsx") %>% janitor::clean_names()

rp_ano <- rp_ano%>% rename( "rp_n_proc" = "restos_a_pagar_nao_processados_a_pagar" )
rp_ano <- rp_ano%>% rename( "rp_proc" = "restos_a_pagar_processados_a_pagar" )

rp_ano <- rp_ano%>% rename( "ano_empenho" = "ne_c_cor_ano_emissao" )

# converte NA em zero.
rp_ano[is.na(rp_ano)] <- 0

```

## Limpar os dados

É necessário limpar os dados:

1\) convertendo para zero os valores ausentes (NA)

2\) excluíndo da base os registros com código de exceção.

```{r limpar_dados}
# converte NA em zero.
rp_ano[is.na(rp_ano)] <- 0


# https://www.r-bloggers.com/the-notin-operator/
'%!in%' <- Negate('%in%')

# filtrar os códigos de exceção
rp_ano <- rp_ano %>% filter(ano_lancamento %!in% c("-7","-9"), ano_empenho %!in% c("-7","-9"))%>% group_by(ano_empenho, ano_lancamento) 

```

## Criar variáveis "saldo", "tempo" e "defasagem"

eensão dos

```{r}
rp_ano <- rp_ano%>% mutate(saldo = (rp_n_proc + rp_proc))
```

```{r}
datatable(rp_ano %>% group_by(ano_empenho, ano_lancamento) %>% summarise(saldo = sum(saldo)) %>% filter(saldo !=0))%>% formatCurrency(3:5, 'R$ ', digits = 1)
```

```{r tempo}

rp_ano <- rp_ano %>% mutate(tempo = as.integer(ano_lancamento)-as.integer(ano_empenho))

```

```{r plot_ano_empenho}
library(viridis) 
p <- rp_ano  %>%  group_by(ano_lancamento,ano_empenho) %>% summarise(saldo = round(sum(saldo)/1000000000,1) ) %>%  
    ggplot()+ 
    geom_col(aes(x=ano_lancamento, y=saldo, fill =(ano_empenho)))
ggplotly(p)
```

Creie a variável "defasagem" para identificar o tempo entre a emissão do empenho e o ano do lançamento do resto a pagar. Se considerarmos o ano fiscal de 2021, um empenho emitido em 2019 terá uma defasagem de 2 anos.

Para deixar o gráfico mais intuitivo, a variável "defasagem" pode assumir apenas um dos três valores abaixo:

-   1 ano,

-   2 anos

-   maior que 2 anos.

Dessa forma, os empenhos mais defasados foram agrupados em "maior que 2 anos".

```{r defasagem}
rp_ano <- rp_ano %>% mutate (defasagem = case_when(
  tempo == 1 ~ "1 ano",
  tempo == 2 ~ "2 anos",
  TRUE ~ "maior que 2 anos"
                                                ))

datatable(rp_ano %>% filter(ano_lancamento > 2018, ano_empenho > 2015) %>% group_by(ano_empenho,ano_lancamento, defasagem) %>% summarise(defasagem= max(defasagem)) %>% pivot_wider(names_from = ano_lancamento, values_from = defasagem), colnames = c( 'ano do empenho', 'lançamento em 2019', 'lançamento em 2020', 'lançamento em 2021', 'lançamento em 2022'), options = list(
  language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json'),
  pageLength = 10
),
  caption = 'Restos a Pagar a Pagar: defasagem temporal.')
```

```{r plot_saldo_defasagem}
p <- rp_ano  %>%  group_by(ano_lancamento,defasagem) %>% summarise(saldo = round(sum(saldo)/1000000000,1) ) %>%  
   ggplot()+ 
  geom_col(aes(x=ano_lancamento, y=saldo, fill =(defasagem)))+
     scale_fill_manual(
    values = c("darkblue", "lightblue", "red")
  )+ ggtitle("Restos a Pagar: defasagem temporal do empenho")+ labs(y = "saldo em R$ BI", x = "ano lançamento")

ggplotly(p)
```

```{r plot_defasagem_saldo_participacao}
p <- rp_ano %>%  group_by(ano_lancamento,defasagem) %>% summarise(saldo = round(sum(saldo)/1000000000,1) ) %>%  
   ggplot()+ 
  geom_col(aes(x=ano_lancamento, y=saldo, fill =(defasagem)), position = "fill")+
     scale_fill_manual(
    values = c("darkblue", "lightblue", "red")
  )+ ggtitle("Restos a Pagar a Pagar: defasagem temporal do empenho")+ labs(y = "participação", x = "ano lançamento")+ theme(
  axis.text.y = element_blank(),
  axis.ticks = element_blank())

ggplotly(p)
```

```{r plot_rp_N_proc}
p <- rp_ano  %>%  group_by(ano_lancamento,defasagem) %>% summarise(saldo = round(sum(rp_n_proc)/1000000000,1) ) %>%  
   ggplot()+ 
  geom_col(aes(x=ano_lancamento, y=saldo, fill =(defasagem)))+
     scale_fill_manual(
    values = c("darkblue", "lightblue", "red")
  )+ ggtitle("Restos a Pagar NÃO Processados a Pagar: defasagem temporal do empenho")+ labs(y = "saldo em R$ BI", x = "ano lançamento")

ggplotly(p) 
```

```{r plor_rp_proc}
p <- rp_ano  %>%  group_by(ano_lancamento,defasagem) %>% summarise(saldo = round(sum(rp_proc)/1000000000,1) ) %>%  
   ggplot()+ 
  geom_col(aes(x=ano_lancamento, y=saldo, fill =(defasagem)))+
     scale_fill_manual(
    values = c("darkblue", "lightblue", "red")
  )+ ggtitle("Restos a Pagar Processados a Pagar: defasagem temporal do empenho")+ labs(y = "saldo em R$ BI", x = "ano lançamento")

ggplotly(p) 
```

```{r rp_proc_salto}
salto <- (rp_ano %>% filter(ano_lancamento %in% c(2019,2020)) %>% group_by(elemento_despesa_nome, ano_lancamento, ano_empenho) %>% summarise(rp_proc = round(sum(rp_proc)/1000000,1)) %>% pivot_wider(names_from = ano_lancamento, values_from = rp_proc) )

salto[is.na(salto)] <- 0

salto <- salto %>% mutate(diferenca = `2020`- `2019`)
```

```{r rp_proc_maiores_acrescimos}

datatable(head(salto %>% filter (diferenca != 0)%>% arrange(desc(diferenca) ),10), colnames = c('elemento da despesa', 'ano do empenho', 'lançamento em 2019', 'lançamento em 2020', 'variação'), options = list(
  language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json'),
  pageLength = 10
),
  caption = 'Restos a Pagar Processados a Pagar: maiores acréscimos entre os exercícios de 2019 e 2020 em R$ milhões.')%>% formatCurrency(3:5, 'R$ ', digits = 1)
```

```{r rp_proc_maiores_reducoes}
datatable(head(salto %>% filter (diferenca != 0)%>% arrange((diferenca) ),10), colnames = c('elemento da despesa', 'ano do empenho', 'lançamento em 2019', 'lançamento em 2020', 'variação'), options = list(
  language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json'),
  pageLength = 10
),
  caption = 'Restos a Pagar Processados a Pagar: maiores reduções entre os exercícios de 2019 e 2020 em R$ milhões.')%>% formatCurrency(3:5, 'R$ ', digits = 1)
```

```{r}
rp <- read_excel("relatorios_fiscais/rreo/rp_pdg.xlsx")
colnames(rp)[1] <- "data"
colnames(rp)[2] <- "ano"
colnames(rp)[3] <- "mes_texto"
colnames(rp)[4] <- "item"
colnames(rp)[5] <- "RP_PROC"
colnames(rp)[6] <- "RP_N_PROC"
rp <- rp %>% select(-item)
rp <- rp %>% mutate(RP_PROC = round(RP_PROC/1000000000,2), RP_N_PROC = round(RP_N_PROC/1000000000,2), rp = RP_PROC + RP_N_PROC)
rp <- rp %>%   mutate(data_ts = ceiling_date( parse_date_time(paste0(ano,"-",str_sub(data, start = 5L),"-01"),"%y%m%d") %m+% months(1), 'month') %m-% days(1))


```

https://www.inf.ufsc.br/\~marcelo.menezes.reis/Cap4.pdf

https://rstudio.github.io/dygraphs/gallery-roll-periods.html

```{r}
library("xts")
library("dygraphs")
rp_xts <- xts(rp %>% select(rp), rp$data_ts )

p <- dygraph(rp_xts, main = "Restos a Pagar: saldo a pagar em R$ Bi (suavizado por 12 meses)") %>%
  dyOptions(stepPlot = TRUE)%>% 
  dyRangeSelector()%>%
  dyAxis("y", label = "R$ BI") %>%
  dyOptions(colors = RColorBrewer::brewer.pal(3, "Set2")) %>% 
  dyRoller(rollPeriod = 12)
(p)
```

https://fmeireles.com/blog/rstats/deflacionar-series-no-r-deflatebr/

```{r}
library("deflateBR")


rp <- rp %>% mutate(rp_deflacionado = deflate(rp,  as.Date(data_ts),"12/2022", "ipca"))


rp_xts_deflacionado <- xts(rp %>% select(rp_deflacionado), rp$data_ts )

p <- dygraph(rp_xts_deflacionado, main = "Restos a Pagar: saldo a pagar em R$ Bi (suavizado por 12 meses)") %>%
  dyOptions(stepPlot = TRUE)%>%
  dyRangeSelector()%>%
  dyAxis("y", label = "R$ BI") %>%
  dyOptions(colors = RColorBrewer::brewer.pal(3, "Set2")) %>%
  dyRoller(rollPeriod = 12)
(p)
```

```{r}
dot_atu <- read_excel("relatorios_fiscais/rreo/dot_atu.xlsx") %>% janitor::clean_names()

colnames(dot_atu)[1] <- "data"

dot_atu <- dot_atu %>% filter(resultado_eof_codigo %in% c(2,7,8,9)) %>% group_by(data) %>% summarise(dotacao_atualizada = sum(dotacao_atualizada))

rp_dot <- left_join(rp,dot_atu %>% select (data,dotacao_atualizada))



rp_dot <- rp_dot %>% mutate ( dotacao_primário_discricionário = dotacao_atualizada/1000000000)

rp_xts <- xts(rp_dot %>% select(rp, dotacao_primário_discricionário), rp$data_ts )

p <- dygraph(rp_xts, main = "Restos a Pagar: saldo a pagar em R$ Bi (suavizado por 12 meses)") %>%
  dyOptions(stepPlot = TRUE)%>% 
  dyRangeSelector()%>%
  dyAxis("y", label = "R$ BI") %>%
  dyOptions(colors = RColorBrewer::brewer.pal(3, "Set2")) %>% 
  dyRoller(rollPeriod = 12)
(p)
```
